version: '3.9'

services:
  db:
    image: postgres:latest
    container_name: shopdb
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - 5432:5432
    volumes:
      - ./volumes/postgresdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - 5672:5672
      - 15672:15672

  intermediary-service:
    build:
      context: .
      dockerfile: ./apps/intermediary-service/Dockerfile
      target: development
    command: npm run start:dev intermediary-service
    hostname: intermediary-service
    container_name: intermediary-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 3000:3000
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  order-service:
    build:
      context: .
      dockerfile: ./apps/order-service/Dockerfile
      target: development
    command: npm run start:dev order-service
    hostname: order-service
    container_name: order-service
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      inventory-service:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/order-service/.env

  inventory-service:
    build:
      context: .
      dockerfile: ./apps/inventory-service/Dockerfile
      target: development
    command: npm run start:dev inventory-service
    hostname: inventory-service
    container_name: inventory-service
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/inventory-service/.env
