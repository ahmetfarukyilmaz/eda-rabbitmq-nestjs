version: '3.9'

services:
  order-db:
    image: postgres:latest
    container_name: order-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: order_db
    ports:
      - 5432:5432
    volumes:
      - ./volumes/order-db:/var/lib/postgresql/data

  inventory-db:
    image: postgres:latest
    container_name: inventory-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: inventory_db
    ports:
      - 5433:5432
    volumes:
      - ./volumes/inventory-db:/var/lib/postgresql/data

  logging-db:
    image: postgres:latest
    container_name: logging-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: logging_db
    ports:
      - 5434:5432
    volumes:
      - ./volumes/logging-db:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    healthcheck:
      #test: ['CMD', 'rabbitmqctl', 'check_running']
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - 5672:5672
      - 15672:15672

  intermediary-service:
    build:
      context: .
      dockerfile: ./apps/intermediary-service/Dockerfile
      target: development
    command: npm run start:dev intermediary-service
    hostname: intermediary-service
    container_name: intermediary-service
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
    ports:
      - 3000:3000
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  order-service:
    build:
      context: .
      dockerfile: ./apps/order-service/Dockerfile
      target: development
    command: npm run start:dev order-service
    hostname: order-service
    container_name: order-service
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      order-db:
        condition: service_started
      inventory-service:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/order-service/.env

  inventory-service:
    build:
      context: .
      dockerfile: ./apps/inventory-service/Dockerfile
      target: development
    command: npm run start:dev inventory-service
    hostname: inventory-service
    container_name: inventory-service
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      inventory-db:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/inventory-service/.env

  logging-service:
    build:
      context: .
      dockerfile: ./apps/logging-service/Dockerfile
      target: development
    command: npm run start:dev logging-service
    hostname: logging-service
    container_name: logging-service
    depends_on:
      rabbitmq:
        condition: service_healthy
        restart: true
      logging-db:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - ./apps/logging-service/.env
